// LICENSE:
// 
// This software is licensed for use under the Free Software Foundation's GPL v3.0 license

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.24.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------

#nullable enable

using System.Collections.Concurrent;
using System.Runtime.CompilerServices;
using SnapsInAZfs.Interop.Zfs.ZfsTypes;
using Terminal.Gui.Trees;
using ZfsObjectConfigurationTreeNode = SnapsInAZfs.ConfigConsole.TreeNodes.ZfsObjectConfigurationTreeNode;

namespace SnapsInAZfs.ConfigConsole;

using Terminal.Gui;

public partial class ZfsConfigurationWindow
{
    private static readonly Logger Logger = LogManager.GetCurrentClassLogger( );

    private readonly ConcurrentDictionary<string, ZfsRecord> _treeDatasets = new( );

    public ZfsConfigurationWindow( )
    {
        // ReSharper disable once HeapView.DelegateAllocation
        // ReSharper disable once HeapView.ObjectAllocation.Possible
        Initialized += ZfsConfigurationWindowOnInitialized;
        InitializeComponent( );
    }

    private bool _eventsEnabled;
    private bool _alreadyHandledSelectedItemChanged;
    private ZfsObjectConfigurationTreeNode SelectedTreeNode => (ZfsObjectConfigurationTreeNode)zfsTreeView.SelectedObject;

    private void BooleanRadioGroupOnMouseClick( MouseEventArgs args )
    {
        RadioGroupWithSourceViewData viewData = (RadioGroupWithSourceViewData)args.MouseEvent.View.Data;
        ZfsProperty<bool> newProperty = SelectedTreeNode.UpdateTreeNodeProperty(viewData.PropertyName, viewData.RadioGroup.GetSelectedBooleanFromLabel( ) );
        viewData.SourceTextField.Text = newProperty.InheritedFrom;
        UpdateFieldsForSelectedZfsTreeNode( );
        UpdateButtonState( );
    }

    private void ClearAllPropertyFields( bool manageEventHandlers = false )
    {
        if ( manageEventHandlers )
        {
            DisableEventHandlers( );
        }

        nameTextField.Clear( );
        typeTextField.Clear( );
        enabledRadioGroup.Clear( );
        enabledSourceTextField.Clear( );
        takeSnapshotsRadioGroup.Clear( );
        takeSnapshotsSourceTextField.Clear( );
        pruneSnapshotsRadioGroup.Clear( );
        pruneSnapshotsSourceTextField.Clear( );
        recursionRadioGroup.Clear( );
        recursionSourceTextField.Clear( );
        templateSourceTextField.Clear( );
        retentionFrequentTextField.Clear( );
        retentionHourlyTextField.Clear( );
        retentionDailyTextField.Clear( );
        retentionWeeklyTextField.Clear( );
        retentionMonthlyTextField.Clear( );
        retentionYearlyTextField.Clear( );
        retentionPruneDeferralTextField.Clear( );
        recentFrequentTextField.Clear( );
        recentHourlyTextField.Clear( );
        recentDailyTextField.Clear( );
        recentWeeklyTextField.Clear( );
        recentMonthlyTextField.Clear( );
        recentYearlyTextField.Clear( );

        if ( manageEventHandlers )
        {
            EnableEventHandlers( );
        }
    }

    private void DisableEventHandlers( )
    {
        if ( !_eventsEnabled )
        {
            return;
        }

        Logger.Debug( "Disabling event handlers for zfs configuration fields" );

        // ReSharper disable HeapView.ObjectAllocation.Possible
        refreshButton.Clicked -= RefreshZfsTreeViewFromZfs;
        resetCurrentButton.Clicked -= ResetCurrentButtonOnClicked;
        zfsTreeView.SelectionChanged -= zfsTreeViewOnSelectionChanged;
        enabledRadioGroup.SelectedItemChanged -= EnabledRadioGroupSelectedItemChanged;
        enabledRadioGroup.MouseClick -= BooleanRadioGroupOnMouseClick;
        takeSnapshotsRadioGroup.SelectedItemChanged -= TakeSnapshotsRadioGroupSelectedItemChanged;
        takeSnapshotsRadioGroup.MouseClick -= BooleanRadioGroupOnMouseClick;
        pruneSnapshotsRadioGroup.SelectedItemChanged -= PruneSnapshotsRadioGroupSelectedItemChanged;
        pruneSnapshotsRadioGroup.MouseClick -= BooleanRadioGroupOnMouseClick;
        recursionRadioGroup.SelectedItemChanged -= RecursionRadioGroupSelectedItemChanged;
        recursionRadioGroup.MouseClick -= StringRadioGroupOnMouseClick;
        templateListView.SelectedItemChanged -= TemplateListViewOnSelectedItemChanged;
        retentionFrequentTextField.Leave -= RetentionFrequentTextFieldOnLeave;
        retentionHourlyTextField.Leave -= RetentionHourlyTextFieldOnLeave;
        retentionDailyTextField.Leave -= RetentionDailyTextFieldOnLeave;
        retentionWeeklyTextField.Leave -= RetentionWeeklyTextFieldOnLeave;
        retentionMonthlyTextField.Leave -= RetentionMonthlyTextFieldOnLeave;
        retentionYearlyTextField.Leave -= RetentionYearlyTextFieldOnLeave;
        retentionPruneDeferralTextField.Leave -= RetentionPruneDeferralTextFieldOnLeave;
        saveCurrentButton.Clicked -= SaveCurrentButtonOnClicked;
        // ReSharper restore HeapView.ObjectAllocation.Possible
        _eventsEnabled = false;
        Logger.Debug( "Event handlers for zfs configuration fields disabled" );
    }

    private void EnabledRadioGroupSelectedItemChanged( SelectedItemChangedArgs args )
    {
        UpdateSelectedItemBooleanRadioGroupProperty( enabledRadioGroup );
        UpdateButtonState( );
        UpdateFieldsForSelectedZfsTreeNode( );
    }

    private void EnableEventHandlers( )
    {
        if ( _eventsEnabled )
        {
            return;
        }

        Logger.Debug( "Enabling event handlers for zfs configuration fields" );

        refreshButton.Clicked += RefreshZfsTreeViewFromZfs;
        resetCurrentButton.Clicked += ResetCurrentButtonOnClicked;
        zfsTreeView.SelectionChanged += zfsTreeViewOnSelectionChanged;
        zfsTreeView.MouseClick += ZfsTreeViewOnMouseClick;
        enabledRadioGroup.SelectedItemChanged += EnabledRadioGroupSelectedItemChanged;
        enabledRadioGroup.MouseClick += BooleanRadioGroupOnMouseClick;
        takeSnapshotsRadioGroup.SelectedItemChanged += TakeSnapshotsRadioGroupSelectedItemChanged;
        takeSnapshotsRadioGroup.MouseClick += BooleanRadioGroupOnMouseClick;
        pruneSnapshotsRadioGroup.SelectedItemChanged += PruneSnapshotsRadioGroupSelectedItemChanged;
        pruneSnapshotsRadioGroup.MouseClick += BooleanRadioGroupOnMouseClick;
        recursionRadioGroup.SelectedItemChanged += RecursionRadioGroupSelectedItemChanged;
        recursionRadioGroup.MouseClick += StringRadioGroupOnMouseClick;
        templateListView.SelectedItemChanged += TemplateListViewOnSelectedItemChanged;
        retentionFrequentTextField.Leave += RetentionFrequentTextFieldOnLeave;
        retentionHourlyTextField.Leave += RetentionHourlyTextFieldOnLeave;
        retentionDailyTextField.Leave += RetentionDailyTextFieldOnLeave;
        retentionWeeklyTextField.Leave += RetentionWeeklyTextFieldOnLeave;
        retentionMonthlyTextField.Leave += RetentionMonthlyTextFieldOnLeave;
        retentionYearlyTextField.Leave += RetentionYearlyTextFieldOnLeave;
        retentionPruneDeferralTextField.Leave += RetentionPruneDeferralTextFieldOnLeave;
        saveCurrentButton.Clicked += SaveCurrentButtonOnClicked;
        _eventsEnabled = true;
        Logger.Debug( "Event handlers for zfs configuration fields enabled" );
    }

    private void ZfsTreeViewOnMouseClick( MouseEventArgs e )
    {
        if ( _alreadyHandledSelectedItemChanged )
        {
            _alreadyHandledSelectedItemChanged = false;
            return;
        }
        UpdateFieldsForSelectedZfsTreeNode( );
    }

    private void PruneSnapshotsRadioGroupSelectedItemChanged( SelectedItemChangedArgs args )
    {
        UpdateSelectedItemBooleanRadioGroupProperty( pruneSnapshotsRadioGroup );
        UpdateButtonState( );
        UpdateFieldsForSelectedZfsTreeNode( );
    }

    private void RecursionRadioGroupSelectedItemChanged( SelectedItemChangedArgs e )
    {
        RadioGroupWithSourceViewData viewData = (RadioGroupWithSourceViewData)recursionRadioGroup.Data;
        if ( viewData.RadioGroup.GetSelectedLabelString( ) != SelectedTreeNode.TreeDataset.Recursion.Value )
        {
            UpdateSelectedItemStringRadioGroupProperty( recursionRadioGroup );
        }

        UpdateFieldsForSelectedZfsTreeNode( );
        UpdateButtonState( );
    }

    private void RefreshZfsTreeViewFromZfs( )
    {
        // Disabling this warning because we are intentionally firing this off asynchronously.
        // The callee will handle button state.
#pragma warning disable CS4014
        RefreshZfsTreeViewFromZfsAsync( );
#pragma warning restore CS4014
    }

    private async Task RefreshZfsTreeViewFromZfsAsync( )
    {
        Logger.Debug( "Refreshing zfs configuration tree view" );
        DisableEventHandlers( );
        try
        {
            Logger.Debug( "Clearing objects from zfs configuration tree view" );
            zfsTreeView.ClearObjects( );
            _treeDatasets.Clear( );
            ConfigConsole.BaseDatasets.Clear( );
            ConfigConsole.Snapshots.Clear( );
            Logger.Debug( "Getting zfs objects from zfs and populating configuration tree view" );
            List<ITreeNode> treeRootNodes = await ZfsTasks.GetFullZfsConfigurationTreeAsync( Program.Settings!, ConfigConsole.BaseDatasets, _treeDatasets, ConfigConsole.Snapshots, ConfigConsole.CommandRunner! ).ConfigureAwait( true );
            zfsTreeView.AddObjects( treeRootNodes );
            UpdateButtonState( );
            zfsTreeView.SetFocus( );
        }
        catch ( Exception e )
        {
            Logger.Error( e, "Error getting ZFS configuration tree" );
        }

        EnableEventHandlers( );
        Logger.Debug( "Finished refreshing zfs configuration tree view" );
    }

    private void ResetCurrentButtonOnClicked( )
    {
        DisableEventHandlers( );
        ClearAllPropertyFields( );
        SelectedTreeNode.CopyBaseDatasetPropertiesToTreeDataset();
        UpdateFieldsForSelectedZfsTreeNode( false );
        UpdateButtonState( );
        EnableEventHandlers( );
    }

    private void RetentionDailyTextFieldOnLeave( FocusEventArgs e )
    {
        try
        {
            DisableEventHandlers( );
            int fieldIntValue = retentionDailyTextField.Text.ToInt32( -1 );
            ( int min, int max ) = ZfsPropertyValueConstants.IntPropertyRanges[ ZfsPropertyNames.SnapshotRetentionDailyPropertyName ];
            if ( fieldIntValue < min || fieldIntValue > max )
            {
                Logger.Warn( "Invalid value entered for {0}: {1}. Must be a valid integer between {2:D} and {3:D}", ZfsPropertyNames.SnapshotRetentionDailyPropertyName, retentionDailyTextField.Text, min, max );
                MessageBox.ErrorQuery( "Invalid Retention Property Value", $"The value for Daily snapshot retention must be an integer from 0 to {int.MaxValue:D}.\nValue will revert to previous setting.", "OK" );
                retentionDailyTextField.Text = SelectedTreeNode.TreeDataset.SnapshotRetentionDaily.Value.ToString( );
                return;
            }

            if ( fieldIntValue != SelectedTreeNode.TreeDataset.SnapshotRetentionDaily.Value )
            {
                UpdateSelectedItemIntProperty( retentionDailyTextField, ZfsPropertyNames.SnapshotRetentionDailyPropertyName, fieldIntValue );
            }
        }
        finally
        {
            UpdateFieldsForSelectedZfsTreeNode( false );
            UpdateButtonState( );
            EnableEventHandlers( );
        }
    }

    private void RetentionFrequentTextFieldOnLeave( FocusEventArgs e )
    {
        try
        {
            DisableEventHandlers( );
            int fieldIntValue = retentionFrequentTextField.Text.ToInt32( -1 );
            ( int min, int max ) = ZfsPropertyValueConstants.IntPropertyRanges[ ZfsPropertyNames.SnapshotRetentionFrequentPropertyName ];
            if ( fieldIntValue < min || fieldIntValue > max )
            {
                Logger.Warn( "Invalid value entered for {0}: {1}. Must be a valid integer between {2:D} and {3:D}", ZfsPropertyNames.SnapshotRetentionFrequentPropertyName, retentionFrequentTextField.Text, min, max );
                MessageBox.ErrorQuery( "Invalid Retention Property Value", $"The value for Frequent snapshot retention must be an integer from 0 to {int.MaxValue:D}.\nValue will revert to previous setting.", "OK" );
                retentionFrequentTextField.Text = SelectedTreeNode.TreeDataset.SnapshotRetentionFrequent.Value.ToString( );
                return;
            }

            if ( fieldIntValue != SelectedTreeNode.TreeDataset.SnapshotRetentionFrequent.Value )
            {
                UpdateSelectedItemIntProperty( retentionFrequentTextField, ZfsPropertyNames.SnapshotRetentionFrequentPropertyName, fieldIntValue );
            }
        }
        finally
        {
            UpdateFieldsForSelectedZfsTreeNode( false );
            UpdateButtonState( );
            EnableEventHandlers( );
        }
    }

    private void RetentionHourlyTextFieldOnLeave( FocusEventArgs e )
    {
        try
        {
            DisableEventHandlers( );
            int fieldIntValue = retentionHourlyTextField.Text.ToInt32( -1 );
            ( int min, int max ) = ZfsPropertyValueConstants.IntPropertyRanges[ ZfsPropertyNames.SnapshotRetentionHourlyPropertyName ];
            if ( fieldIntValue < min || fieldIntValue > max )
            {
                Logger.Warn( "Invalid value entered for {0}: {1}. Must be a valid integer between {2:D} and {3:D}", ZfsPropertyNames.SnapshotRetentionHourlyPropertyName, retentionHourlyTextField.Text, min, max );
                MessageBox.ErrorQuery( "Invalid Retention Property Value", $"The value for Hourly snapshot retention must be an integer from 0 to {int.MaxValue:D}.\nValue will revert to previous setting.", "OK" );
                retentionHourlyTextField.Text = SelectedTreeNode.TreeDataset.SnapshotRetentionHourly.Value.ToString( );
                return;
            }

            if ( fieldIntValue != SelectedTreeNode.TreeDataset.SnapshotRetentionHourly.Value )
            {
                UpdateSelectedItemIntProperty( retentionHourlyTextField, ZfsPropertyNames.SnapshotRetentionHourlyPropertyName, fieldIntValue );
            }
        }
        finally
        {
            UpdateFieldsForSelectedZfsTreeNode( false );
            UpdateButtonState( );
            EnableEventHandlers( );
        }
    }

    private void RetentionMonthlyTextFieldOnLeave( FocusEventArgs e )
    {
        try
        {
            DisableEventHandlers( );
            int fieldIntValue = retentionMonthlyTextField.Text.ToInt32( -1 );
            ( int min, int max ) = ZfsPropertyValueConstants.IntPropertyRanges[ ZfsPropertyNames.SnapshotRetentionMonthlyPropertyName ];
            if ( fieldIntValue < min || fieldIntValue > max )
            {
                Logger.Warn( "Invalid value entered for {0}: {1}. Must be a valid integer between {2:D} and {3:D}", ZfsPropertyNames.SnapshotRetentionMonthlyPropertyName, retentionMonthlyTextField.Text, min, max );
                MessageBox.ErrorQuery( "Invalid Retention Property Value", $"The value for Monthly snapshot retention must be an integer from 0 to {int.MaxValue:D}.\nValue will revert to previous setting.", "OK" );
                retentionMonthlyTextField.Text = SelectedTreeNode.TreeDataset.SnapshotRetentionMonthly.Value.ToString( );
                return;
            }

            if ( fieldIntValue != SelectedTreeNode.TreeDataset.SnapshotRetentionMonthly.Value )
            {
                UpdateSelectedItemIntProperty( retentionMonthlyTextField, ZfsPropertyNames.SnapshotRetentionMonthlyPropertyName, fieldIntValue );
            }
        }
        finally
        {
            UpdateFieldsForSelectedZfsTreeNode( false );
            UpdateButtonState( );
            EnableEventHandlers( );
        }
    }

    private void RetentionPruneDeferralTextFieldOnLeave( FocusEventArgs e )
    {
        try
        {
            DisableEventHandlers( );
            int fieldIntValue = retentionPruneDeferralTextField.Text.ToInt32( -1 );
            ( int min, int max ) = ZfsPropertyValueConstants.IntPropertyRanges[ ZfsPropertyNames.SnapshotRetentionPruneDeferralPropertyName ];
            if ( fieldIntValue < min || fieldIntValue > max )
            {
                Logger.Warn( "Invalid value entered for {0}: {1}. Must be a valid integer between {2:D} and {3:D}", ZfsPropertyNames.SnapshotRetentionPruneDeferralPropertyName, retentionPruneDeferralTextField.Text, min, max );
                MessageBox.ErrorQuery( "Invalid Retention Property Value", $"The value for PruneDeferral snapshot retention must be an integer from 0 to {int.MaxValue:D}.\nValue will revert to previous setting.", "OK" );
                retentionPruneDeferralTextField.Text = SelectedTreeNode.TreeDataset.SnapshotRetentionPruneDeferral.Value.ToString( );
                return;
            }

            if ( fieldIntValue != SelectedTreeNode.TreeDataset.SnapshotRetentionPruneDeferral.Value )
            {
                UpdateSelectedItemIntProperty( retentionPruneDeferralTextField, ZfsPropertyNames.SnapshotRetentionPruneDeferralPropertyName, fieldIntValue );
            }
        }
        finally
        {
            UpdateFieldsForSelectedZfsTreeNode( false );
            UpdateButtonState( );
            EnableEventHandlers( );
        }
    }

    private void RetentionWeeklyTextFieldOnLeave( FocusEventArgs e )
    {
        try
        {
            DisableEventHandlers( );
            int fieldIntValue = retentionWeeklyTextField.Text.ToInt32( -1 );
            ( int min, int max ) = ZfsPropertyValueConstants.IntPropertyRanges[ ZfsPropertyNames.SnapshotRetentionWeeklyPropertyName ];
            if ( fieldIntValue < min || fieldIntValue > max )
            {
                Logger.Warn( "Invalid value entered for {0}: {1}. Must be a valid integer between {2:D} and {3:D}", ZfsPropertyNames.SnapshotRetentionWeeklyPropertyName, retentionWeeklyTextField.Text, min, max );
                MessageBox.ErrorQuery( "Invalid Retention Property Value", $"The value for Weekly snapshot retention must be an integer from 0 to {int.MaxValue:D}.\nValue will revert to previous setting.", "OK" );
                retentionWeeklyTextField.Text = SelectedTreeNode.TreeDataset.SnapshotRetentionWeekly.Value.ToString( );
                return;
            }

            if ( fieldIntValue != SelectedTreeNode.TreeDataset.SnapshotRetentionWeekly.Value )
            {
                UpdateSelectedItemIntProperty( retentionWeeklyTextField, ZfsPropertyNames.SnapshotRetentionWeeklyPropertyName, fieldIntValue );
            }
        }
        finally
        {
            UpdateFieldsForSelectedZfsTreeNode( false );
            UpdateButtonState( );
            EnableEventHandlers( );
        }
    }

    private void RetentionYearlyTextFieldOnLeave( FocusEventArgs e )
    {
        try
        {
            DisableEventHandlers( );
            int fieldIntValue = retentionYearlyTextField.Text.ToInt32( -1 );
            ( int min, int max ) = ZfsPropertyValueConstants.IntPropertyRanges[ ZfsPropertyNames.SnapshotRetentionYearlyPropertyName ];
            if ( fieldIntValue < min || fieldIntValue > max )
            {
                Logger.Warn( "Invalid value entered for {0}: {1}. Must be a valid integer between {2:D} and {3:D}", ZfsPropertyNames.SnapshotRetentionYearlyPropertyName, retentionYearlyTextField.Text, min, max );
                MessageBox.ErrorQuery( "Invalid Retention Property Value", $"The value for Yearly snapshot retention must be an integer from 0 to {int.MaxValue:D}.\nValue will revert to previous setting.", "OK" );
                retentionYearlyTextField.Text = SelectedTreeNode.TreeDataset.SnapshotRetentionYearly.Value.ToString( );
                return;
            }

            if ( fieldIntValue != SelectedTreeNode.TreeDataset.SnapshotRetentionYearly.Value )
            {
                UpdateSelectedItemIntProperty( retentionYearlyTextField, ZfsPropertyNames.SnapshotRetentionYearlyPropertyName, fieldIntValue );
            }
        }
        finally
        {
            UpdateFieldsForSelectedZfsTreeNode( false );
            UpdateButtonState( );
            EnableEventHandlers( );
        }
    }

    private void SaveCurrentButtonOnClicked( )
    {
        try
        {
            DisableEventHandlers( );

            if ( ConfigConsole.CommandRunner is null )
            {
                Logger.Error( "ZFS Command runner is null. Cannot continue with save operation" );
            }

            if ( !SelectedTreeNode.IsModified |! SelectedTreeNode.IsLocallyModified )
            {
                Logger.Info( "Selected ZFS object was not modified when save was requested. This should not happen" );
                return;
            }

            string zfsObjectPath = SelectedTreeNode.TreeDataset.Name;
            string pendingCommand = $"zfs set {SelectedTreeNode.GetModifiedZfsProperties().ToStringForZfsSet( )} {zfsObjectPath}";
            int dialogResult = MessageBox.ErrorQuery( "Confirm Saving ZFS Object Configuration", $"The following command will be executed:\n{pendingCommand}\n\nTHIS OPERATION CANNOT BE UNDONE", 0, "Cancel", "Save" );

            switch ( dialogResult )
            {
                case 0:
                    Logger.Debug( "User canceled save confirmation for ZFS object {0}", zfsObjectPath );
                    return;
                case 1:
                    Logger.Debug( "User confirmed the pending zfs set operation {0}", pendingCommand );
                    break;
            }

            Logger.Info( "Saving {0}", zfsObjectPath );
            if ( !ZfsTasks.SetPropertiesForDataset( Program.Settings!.DryRun, zfsObjectPath, SelectedTreeNode.GetModifiedZfsProperties(), ConfigConsole.CommandRunner! ) && !Program.Settings.DryRun )
            {
                Logger.Trace( "Result from SetPropertiesForDataset was false, either because DryRun==true or an error occurred in ZfsTasks.SetPropertiesForDataset" );
                if ( !Program.Settings.DryRun )
                {
                    Logger.Error( "Setting ZFS properties for ZFS object {0} failed", zfsObjectPath );
                }

                return;
            }

            Logger.Debug( "Applying inheritable properties to children of {0} in tree", zfsObjectPath );
            SelectedTreeNode.CopyTreeDatasetPropertiesToBaseDataset();
        }
        finally
        {
            UpdateFieldsForSelectedZfsTreeNode( false );
            UpdateButtonState( );
            EnableEventHandlers( );
        }
    }

    private void SetCanFocusStates( )
    {
        zfsTreeView.Enabled = true;
        zfsTreeView.CanFocus = true;
        snapshotsListView.Enabled = true;
        snapshotsListView.CanFocus = true;
        enabledRadioGroup.Enabled = true;
        enabledRadioGroup.CanFocus = true;
        takeSnapshotsRadioGroup.Enabled = true;
        takeSnapshotsRadioGroup.CanFocus = true;
        pruneSnapshotsRadioGroup.Enabled = true;
        pruneSnapshotsRadioGroup.CanFocus = true;
        retentionFrequentTextField.Enabled = true;
        retentionFrequentTextField.CanFocus = true;
        retentionHourlyTextField.Enabled = true;
        retentionHourlyTextField.CanFocus = true;
        retentionDailyTextField.Enabled = true;
        retentionDailyTextField.CanFocus = true;
        retentionWeeklyTextField.Enabled = true;
        retentionWeeklyTextField.CanFocus = true;
        retentionMonthlyTextField.Enabled = true;
        retentionMonthlyTextField.CanFocus = true;
        retentionYearlyTextField.Enabled = true;
        retentionYearlyTextField.CanFocus = true;
    }

    private void SetReadOnlyStates( )
    {
        nameTextField.ReadOnly = true;
        typeTextField.ReadOnly = true;
        enabledSourceTextField.ReadOnly = true;
        takeSnapshotsSourceTextField.ReadOnly = true;
        pruneSnapshotsSourceTextField.ReadOnly = true;
        templateSourceTextField.ReadOnly = true;
        recursionSourceTextField.ReadOnly = true;
        recentFrequentTextField.ReadOnly = true;
        recentHourlyTextField.ReadOnly = true;
        recentDailyTextField.ReadOnly = true;
        recentWeeklyTextField.ReadOnly = true;
        recentMonthlyTextField.ReadOnly = true;
        recentYearlyTextField.ReadOnly = true;
    }

    private void SetTabStops( )
    {
        SetTabStopsForTreeFrame( 0 );
        SetTabStopsForSnapshotsFrame( 1 );
        SetTabStopsForGeneralPropertiesFrame( 2 );
        SetPropertiesForRetentionPropertiesFrame( 3 );
        SetTabStopsForSnapshotPropertiesFrame( 4 );
        SetTabStopsForActionsFrame( 5 );

        void SetTabStopsForGeneralPropertiesFrame( int generalFrameIndex )
        {
            generalFrame.TabStop = true;
            generalFrame.TabIndex = generalFrameIndex;

            nameLabel.TabStop = false;
            nameTextField.TabStop = false;
            typeLabel.TabStop = false;
            typeTextField.TabStop = false;
            enabledLabel.TabStop = false;
            enabledRadioGroup.TabStop = true;
            enabledRadioGroup.TabIndex = 0;
            enabledSourceLabel.TabStop = false;
            enabledSourceTextField.TabStop = false;
            takeSnapshotsLabel.TabStop = false;
            takeSnapshotsRadioGroup.TabStop = true;
            takeSnapshotsRadioGroup.TabIndex = 1;
            takeSnapshotsSourceLabel.TabStop = false;
            takeSnapshotsSourceTextField.TabStop = false;
            pruneSnapshotsLabel.TabStop = false;
            pruneSnapshotsRadioGroup.TabStop = true;
            pruneSnapshotsRadioGroup.TabIndex = 2;
            pruneSnapshotsSourceLabel.TabStop = false;
            pruneSnapshotsSourceTextField.TabStop = false;
            recursionLabel.TabStop = false;
            recursionRadioGroup.TabStop = true;
            recursionRadioGroup.TabIndex = 3;
            recursionSourceLabel.TabStop = false;
            recursionSourceTextField.TabStop = false;
            templateLabel.TabStop = false;
            templateListView.TabStop = true;
            templateListView.TabIndex = 4;
            templateSourceLabel.TabStop = false;
            templateSourceTextField.TabStop = false;
        }

        void SetPropertiesForRetentionPropertiesFrame( int retentionFrameIndex )
        {
            retentionFrame.TabStop = true;
            retentionFrame.TabIndex = retentionFrameIndex;

            recentFrame.TabStop = false;
            retentionFrequentLabel.TabStop = false;
            retentionFrequentTextField.TabStop = true;
            retentionFrequentTextField.TabIndex = 0;
            retentionHourlyLabel.TabStop = false;
            retentionHourlyTextField.TabStop = true;
            retentionHourlyTextField.TabIndex = 1;
            retentionDailyLabel.TabStop = false;
            retentionDailyTextField.TabStop = true;
            retentionDailyTextField.TabIndex = 2;
            retentionWeeklyLabel.TabStop = false;
            retentionWeeklyTextField.TabStop = true;
            retentionWeeklyTextField.TabIndex = 3;
            retentionMonthlyLabel.TabStop = false;
            retentionMonthlyTextField.TabStop = true;
            retentionMonthlyTextField.TabIndex = 4;
            retentionYearlyLabel.TabStop = false;
            retentionYearlyTextField.TabStop = true;
            retentionYearlyTextField.TabIndex = 5;
        }

        void SetTabStopsForSnapshotPropertiesFrame( int snapshotFrameIndex )
        {
            snapshotPropertiesFrame.TabStop = true;
            snapshotPropertiesFrame.TabIndex = snapshotFrameIndex;
        }

        void SetTabStopsForTreeFrame( int treeFrameIndex )
        {
            zfsConfigurationTreeFrame.TabStop = true;
            zfsConfigurationTreeFrame.TabIndex = treeFrameIndex;
            zfsTreeView.TabStop = true;
            zfsTreeView.TabIndex = 0;
        }

        void SetTabStopsForSnapshotsFrame( int snapshotsFrameIndex )
        {
            snapshotsFrame.TabStop = true;
            snapshotsFrame.TabIndex = snapshotsFrameIndex;
            snapshotsListView.TabStop = true;
            snapshotsListView.TabIndex = 0;
        }

        void SetTabStopsForActionsFrame( int actionsFrameIndex )
        {
            zfsConfigurationActionsFrame.TabStop = true;
            zfsConfigurationActionsFrame.TabIndex = actionsFrameIndex;
        }
    }

    private void SetTagsForPropertyFields( )
    {
        enabledRadioGroup.Data = new RadioGroupWithSourceViewData( ZfsPropertyNames.EnabledPropertyName, enabledRadioGroup, enabledSourceTextField );
        takeSnapshotsRadioGroup.Data = new RadioGroupWithSourceViewData( ZfsPropertyNames.TakeSnapshotsPropertyName, takeSnapshotsRadioGroup, takeSnapshotsSourceTextField );
        pruneSnapshotsRadioGroup.Data = new RadioGroupWithSourceViewData( ZfsPropertyNames.PruneSnapshotsPropertyName, pruneSnapshotsRadioGroup, pruneSnapshotsSourceTextField );
        recursionRadioGroup.Data = new RadioGroupWithSourceViewData( ZfsPropertyNames.RecursionPropertyName, recursionRadioGroup, recursionSourceTextField );
        templateListView.Data = new ListViewWithSourceViewData( ZfsPropertyNames.TemplatePropertyName, templateSourceTextField );
    }

    private void StringRadioGroupOnMouseClick( MouseEventArgs args )
    {
        RadioGroupWithSourceViewData viewData = (RadioGroupWithSourceViewData)args.MouseEvent.View.Data;
        ZfsProperty<string> newProperty = SelectedTreeNode.UpdateTreeNodeProperty( viewData.PropertyName, viewData.RadioGroup.GetSelectedLabelString( ) );

        viewData.SourceTextField.Text = newProperty.InheritedFrom;
        UpdateFieldsForSelectedZfsTreeNode( );
        UpdateButtonState( );
    }

    private void TakeSnapshotsRadioGroupSelectedItemChanged( SelectedItemChangedArgs args )
    {
        UpdateSelectedItemBooleanRadioGroupProperty( takeSnapshotsRadioGroup );
        UpdateButtonState( );
        UpdateFieldsForSelectedZfsTreeNode( );
    }

    private void TemplateListViewOnSelectedItemChanged( ListViewItemEventArgs args )
    {
        ArgumentNullException.ThrowIfNull( args, nameof( args ) );

        ListViewWithSourceViewData viewData = (ListViewWithSourceViewData)templateListView.Data;

        ZfsProperty<string> newProperty = SelectedTreeNode.UpdateTreeNodeProperty( viewData.PropertyName, ConfigConsole.TemplateListItems[ args.Item ].TemplateName );
        viewData.SourceTextField.Text = newProperty.InheritedFrom;
        UpdateFieldsForSelectedZfsTreeNode( );
        UpdateButtonState( );
    }

    private void UpdateButtonState( )
    {
        if ( zfsTreeView.Objects.Any( ) && zfsTreeView.SelectedObject is ZfsObjectConfigurationTreeNode node )
        {
            resetCurrentButton.Enabled = saveCurrentButton.Enabled = node is { IsModified: true, IsLocallyModified: true };
        }
        else
        {
            resetCurrentButton.Enabled = false;
            saveCurrentButton.Enabled = false;
        }
    }

    private void UpdateFieldsForSelectedZfsTreeNode( bool manageEventHandlers = true )
    {
        if ( manageEventHandlers )
        {
            DisableEventHandlers( );
        }

        if ( (ZfsObjectConfigurationTreeNode)zfsTreeView.SelectedObject is not null )
        {
            ZfsRecord treeDataset = SelectedTreeNode.TreeDataset;
            nameTextField.Text = treeDataset.Name;
            typeTextField.Text = treeDataset.Kind;
            enabledRadioGroup.SelectedItem = treeDataset.Enabled.AsTrueFalseRadioIndex( );
            enabledRadioGroup.ColorScheme = treeDataset.Enabled.IsInherited ? inheritedPropertyRadioGroupColorScheme : localPropertyRadioGroupColorScheme;
            enabledRadioGroup.Enabled = true;
            enabledSourceTextField.Text = treeDataset.Enabled.InheritedFrom;
            takeSnapshotsRadioGroup.SelectedItem = treeDataset.TakeSnapshots.AsTrueFalseRadioIndex( );
            takeSnapshotsRadioGroup.ColorScheme = treeDataset.TakeSnapshots.IsInherited ? inheritedPropertyRadioGroupColorScheme : localPropertyRadioGroupColorScheme;
            enabledRadioGroup.Enabled = true;
            takeSnapshotsSourceTextField.Text = treeDataset.TakeSnapshots.InheritedFrom;
            pruneSnapshotsRadioGroup.SelectedItem = treeDataset.PruneSnapshots.AsTrueFalseRadioIndex( );
            pruneSnapshotsRadioGroup.ColorScheme = treeDataset.PruneSnapshots.IsInherited ? inheritedPropertyRadioGroupColorScheme : localPropertyRadioGroupColorScheme;
            pruneSnapshotsSourceTextField.Text = treeDataset.PruneSnapshots.InheritedFrom;
            recursionRadioGroup.Enabled = true;
            try
            {
                recursionRadioGroup.SelectedItem = treeDataset.Recursion.Value switch { ZfsPropertyValueConstants.SnapsInAZfs => 0, ZfsPropertyValueConstants.ZfsRecursion => 1, _ => throw new InvalidOperationException( $"Invalid recursion value {treeDataset.Recursion.Value}" ) };
                recursionRadioGroup.ColorScheme = treeDataset.Recursion.IsInherited ? inheritedPropertyRadioGroupColorScheme : localPropertyRadioGroupColorScheme;
                recursionSourceTextField.Text = treeDataset.Recursion.InheritedFrom;
            }
            catch ( InvalidOperationException e )
            {
                int dialogResult = MessageBox.ErrorQuery( "Invalid ZFS Property Value", e.Message, 2, $"Set to '{ZfsPropertyValueConstants.SnapsInAZfs}'", $"Set to '{ZfsPropertyValueConstants.ZfsRecursion}'", "Do Nothing", "Exit" );
                switch ( dialogResult )
                {
                    case 0:
                    case 1:
                        recursionRadioGroup.SelectedItem = dialogResult;
                        UpdateSelectedItemStringRadioGroupProperty( recursionRadioGroup );
                        recursionRadioGroup.ColorScheme = treeDataset.Recursion.IsInherited ? inheritedPropertyRadioGroupColorScheme : localPropertyRadioGroupColorScheme;
                        recursionSourceTextField.Text = treeDataset.Recursion.InheritedFrom;
                        UpdateButtonState( );
                        break;
                    case 2:
                        break;
                    case 3:
                        Application.RequestStop( );
                        return;
                    default:
                        throw new InvalidOperationException( $"Unexpected dialogResult received: {dialogResult}", e );
                }
            }

            int templateIndex = ConfigConsole.TemplateListItems.FindIndex( t => t.TemplateName == treeDataset.Template.Value );
            if ( templateIndex == -1 )
            {
                MessageBox.ErrorQuery( "Template Not Found", $"The template \"{treeDataset.Template.Value}\", for {treeDataset.Kind} \"{treeDataset.Name}\", was not found in SnapsInAZfs' configuration.\nIs the template defined in one of the expected SnapsInAZfs[.local].json files?\n\nEditing of ZFS properties will be disabled for this session.\nFix the template configuration and run the Config Console again.", "OK - ZFS Configuration Window will be disabled for this session" );
                SnapsInAZfsConfigConsole.ZfsConfigurationWindowDisabledDueToError = true;
                SuperView.Remove( this );
                return;
            }

            templateListView.SelectedItem = templateIndex;
            templateListView.ColorScheme = treeDataset.Template.IsInherited ? inheritedPropertyListViewColorScheme : localPropertyListViewColorScheme;
            templateListView.EnsureSelectedItemVisible( );
            templateListView.Enabled = true;
            templateSourceTextField.Text = treeDataset.Template.InheritedFrom;

            retentionFrequentTextField.Text = treeDataset.SnapshotRetentionFrequent.ValueString;
            retentionFrequentTextField.ColorScheme = treeDataset.SnapshotRetentionFrequent.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            retentionFrequentTextField.Enabled = true;
            retentionHourlyTextField.Text = treeDataset.SnapshotRetentionHourly.ValueString;
            retentionHourlyTextField.ColorScheme = treeDataset.SnapshotRetentionHourly.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            retentionHourlyTextField.Enabled = true;
            retentionDailyTextField.Text = treeDataset.SnapshotRetentionDaily.ValueString;
            retentionDailyTextField.ColorScheme = treeDataset.SnapshotRetentionDaily.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            retentionDailyTextField.Enabled = true;
            retentionWeeklyTextField.Text = treeDataset.SnapshotRetentionWeekly.ValueString;
            retentionWeeklyTextField.ColorScheme = treeDataset.SnapshotRetentionWeekly.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            retentionWeeklyTextField.Enabled = true;
            retentionMonthlyTextField.Text = treeDataset.SnapshotRetentionMonthly.ValueString;
            retentionMonthlyTextField.ColorScheme = treeDataset.SnapshotRetentionMonthly.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            retentionMonthlyTextField.Enabled = true;
            retentionYearlyTextField.Text = treeDataset.SnapshotRetentionYearly.ValueString;
            retentionYearlyTextField.ColorScheme = treeDataset.SnapshotRetentionYearly.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            retentionYearlyTextField.Enabled = true;
            retentionPruneDeferralTextField.Text = treeDataset.SnapshotRetentionPruneDeferral.ValueString;
            retentionPruneDeferralTextField.ColorScheme = treeDataset.SnapshotRetentionPruneDeferral.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            retentionPruneDeferralTextField.Enabled = true;

            recentFrequentTextField.Text = treeDataset.LastFrequentSnapshotTimestamp.IsLocal ? treeDataset.LastFrequentSnapshotTimestamp.ValueString : "None";
            recentHourlyTextField.Text = treeDataset.LastHourlySnapshotTimestamp.IsLocal ? treeDataset.LastHourlySnapshotTimestamp.ValueString : "None";
            recentDailyTextField.Text = treeDataset.LastDailySnapshotTimestamp.IsLocal ? treeDataset.LastDailySnapshotTimestamp.ValueString : "None";
            recentWeeklyTextField.Text = treeDataset.LastWeeklySnapshotTimestamp.IsLocal ? treeDataset.LastWeeklySnapshotTimestamp.ValueString : "None";
            recentMonthlyTextField.Text = treeDataset.LastMonthlySnapshotTimestamp.IsLocal ? treeDataset.LastMonthlySnapshotTimestamp.ValueString : "None";
            recentYearlyTextField.Text = treeDataset.LastYearlySnapshotTimestamp.IsLocal ? treeDataset.LastYearlySnapshotTimestamp.ValueString : "None";
        }

        _alreadyHandledSelectedItemChanged = true;
        if ( manageEventHandlers )
        {
            EnableEventHandlers( );
        }
    }

    private void UpdateSelectedItemBooleanRadioGroupProperty( RadioGroup radioGroup )
    {
        RadioGroupWithSourceViewData viewData = (RadioGroupWithSourceViewData)radioGroup.Data;
        ZfsProperty<bool> newProperty = SelectedTreeNode.UpdateTreeNodeProperty( viewData.PropertyName, radioGroup.GetSelectedBooleanFromLabel( ) );
        viewData.SourceTextField.Text = newProperty.InheritedFrom;
    }

    private void UpdateSelectedItemIntProperty( TextValidateField field, string propertyName, int propertyValue )
    {
        ZfsProperty<int> newProperty = SelectedTreeNode.UpdateTreeNodeProperty( propertyName, propertyValue );
        field.ColorScheme = newProperty.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
    }

    private void UpdateSelectedItemStringRadioGroupProperty( RadioGroup radioGroup )
    {
        RadioGroupWithSourceViewData viewData = (RadioGroupWithSourceViewData)radioGroup.Data;
        ZfsProperty<string> newProperty = SelectedTreeNode.UpdateTreeNodeProperty( viewData.PropertyName, radioGroup.GetSelectedLabelString( ) );
        viewData.SourceTextField.Text = newProperty.InheritedFrom;
    }

    private async void ZfsConfigurationWindowOnInitialized( object? sender, EventArgs e )
    {
        Logger.Trace( "Zfs Configuration Window initialized" );
        ConfiguredTaskAwaitable zfsRefreshTask = RefreshZfsTreeViewFromZfsAsync( ).ConfigureAwait( true );
        templateListView.SetSource( ConfigConsole.TemplateListItems );
        SetCanFocusStates( );
        SetTagsForPropertyFields( );
        SetTabStops( );
        SetReadOnlyStates( );
        await zfsRefreshTask;
        UpdateButtonState( );
        EnableEventHandlers( );
    }

    private void zfsTreeViewOnSelectionChanged( object? sender, SelectionChangedEventArgs<ITreeNode> e )
    {
        ArgumentNullException.ThrowIfNull( sender );
        DisableEventHandlers( );

        ClearAllPropertyFields( );

        UpdateFieldsForSelectedZfsTreeNode( false );
        _alreadyHandledSelectedItemChanged = true;
        UpdateButtonState( );
        EnableEventHandlers( );
    }

    private record RadioGroupWithSourceViewData( string PropertyName, RadioGroup RadioGroup, TextField SourceTextField );

    private record ListViewWithSourceViewData( string PropertyName, TextField SourceTextField );
}
